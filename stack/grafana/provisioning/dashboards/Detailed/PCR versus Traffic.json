{
  "_comment": "Copyright (c) 2022 Cisco and/or its affiliates. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0. Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. AUTHOR(s): Cristina Precup <cprecup@cisco.com> CONTRIBUTOR(s): Philippe Tubello <ptubello@cisco.com>",
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 37,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "influxdb",
        "uid": "INFLUXDB2B082CADEA38E"
      },
      "description": "Apparent power",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "voltamp"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 17,
        "x": 0,
        "y": 0
      },
      "id": 2,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "INFLUXDB2B082CADEA38E"
          },
          "query": "// Unit of measurement: VA instead of W\nfrom(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => \n    r._measurement == \"Cisco-IOS-XR-envmon-oper:power-management/rack/producers/producer-nodes/producer-node\" and \n    (\n    r._field == \"pem_info_array/current_in_a\" or\n    r._field == \"pem_info_array/voltage_in_a\" or \n    r._field == \"pem_info_array/current_in_b\" or\n    r._field == \"pem_info_array/voltage_in_b\"\n    )\n    and r.source == \"${host_c8k}\")\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> rename(columns: {\"pem_info_array/voltage_in_a\": \"voltage_in_a\", \"pem_info_array/current_in_a\": \"current_in_a\", \"pem_info_array/voltage_in_b\": \"voltage_in_b\", \"pem_info_array/current_in_b\": \"current_in_b\"})\n  |> map(fn: (r) => ({\n    r with\n    power_in_a: if float(v: r.current_in_a) > 100 then (float(v: r.voltage_in_a)/1000.0) * (float(v: r.current_in_a)/1000.0) else float(v: r.voltage_in_a) * float(v: r.current_in_a),\n    power_in_b: if float(v: r.current_in_b) > 100 then (float(v: r.voltage_in_b)/1000.0) * (float(v: r.current_in_b)/1000.0) else float(v: r.voltage_in_b) * float(v: r.current_in_b),\n   }))\n  |> map(fn: (r) => ({\n    r with\n    _value: r.power_in_a + r.power_in_b,\n  }))\n  |> window(every: 1m) // Samples of 30 seconds have points that contain only power_in_a or only data for PM0 or PM1. Therefore, aggregate data over 1m to bring them together\n  |> mean()\n  |> duplicate(column: \"_stop\", as: \"_time\")\n  |> group(columns: [\"_time\", \"source\"])\n  |> sum(column: \"_value\") // Sum over all tags (e.g. the PM nodes)\n  |> group()\n  |> group(columns: [\"source\"])",
          "refId": "A"
        }
      ],
      "title": "Input power",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "INFLUXDB2B082CADEA38E"
      },
      "description": "PCR = Power consumption ratio\nPower from router (input power)\nwrt Input data rate",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [
            {
              "options": {
                "-1": {
                  "color": "#808080",
                  "index": 0,
                  "text": "unused"
                }
              },
              "type": "value"
            }
          ],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "#EAB839",
                "value": 2.5
              },
              {
                "color": "red",
                "value": 3
              }
            ]
          },
          "unit": "VA/Gbps"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 7,
        "x": 17,
        "y": 0
      },
      "id": 6,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "",
          "values": false
        },
        "text": {
          "titleSize": 20,
          "valueSize": 20
        },
        "textMode": "auto"
      },
      "pluginVersion": "9.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "INFLUXDB2B082CADEA38E"
          },
          "hide": false,
          "query": "type = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-pfi-im-cmd-oper:interfaces/interface-briefs/interface-brief\" and r._field == \"type\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) =>  r._value =~ /.*IFT_.*HUNDREDGE.*/ or r._value =~ /.*IFT_.*FORTY.*/ or r._value =~ /.*IFT_.*TEN.*/)\n  |> drop(columns: [\"subscription\", \"host\", \"path\", \"_measurement\"])\n  |> map(fn: (r) => ({\n    r with\n    if_type: if r._field == \"type\" then r._value\n    else \"test\"\n   }))\n  |> group(columns: [\"interface_name\", \"source\"])\n  |> drop(columns: [\"_start\", \"_stop\", \"_field\", \"_time\", \"_value\"])\n  |> distinct(column: \"if_type\")\n\nstate = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-pfi-im-cmd-oper:interfaces/interface-briefs/interface-brief\" and r._field == \"state\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) => r._value =~ /.*up.*/)\n  |> drop(columns: [\"subscription\", \"host\", \"path\", \"_measurement\"])\n  |> map(fn: (r) => ({\n    r with\n    if_state: if r._field == \"state\" then r._value\n    else \"NA\"\n   }))\n  |> group(columns: [\"interface_name\", \"source\"])\n  |> drop(columns: [\"_start\", \"_stop\",  \"_field\", \"_time\"])\n  |> last()\n \ninterfaces_up = join(\n\ttables: {d1: state, d2: type},\n    on: [\"interface_name\", \"source\"],\n)\n  |> map(fn: (r) => ({\n    r with\n    if_state: r._value_d1,\n    if_type: r._value_d2\n   }))\n  |> drop(columns: [\"_value_d1\", \"_value_d2\"])\n  |> group(columns: [\"type\"])\n\n\ninput_data_rate = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-infra-statsd-oper:infra-statistics/interfaces/interface/total/data-rate\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) => r._field == \"input_data_rate\")\n  |>last()\n  |> keep(columns: [\"_time\", \"_value\" \"source\", \"interface_name\"])\n\ninput_data_rate_if_up = join(\n\ttables: {d1: interfaces_up, d2: input_data_rate},\n    on: [\"interface_name\", \"source\"],\n)\n\n// Unit: 1000s bps\ntotal_input_data_rate = input_data_rate_if_up\n  |> group()\n  |> group(columns: [\"source\"])\n  |> sum()\n  |> keep(columns: [\"_time\", \"_value\" \"source\"])\n\n\ncount_interfaces = interfaces_up\n  |> keep(columns: [\"interface_name\", \"source\"])\n  |> group(columns: [\"source\"])\n  |> count(column: \"interface_name\")\n  |> map(fn: (r) => ({ r with _value: r.interface_name }))\n  |> keep(columns: [\"_value\", \"source\"])\n\ntotal_power_router = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) => \n    r._measurement == \"Cisco-IOS-XR-envmon-oper:power-management/rack/producers/producer-nodes/producer-node\" and \n    (\n    r._field == \"pem_info_array/current_in_a\" or\n    r._field == \"pem_info_array/voltage_in_a\" or \n    r._field == \"pem_info_array/current_in_b\" or\n    r._field == \"pem_info_array/voltage_in_b\"\n    ))\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> rename(columns: {\"pem_info_array/voltage_in_a\": \"voltage_in_a\", \"pem_info_array/current_in_a\": \"current_in_a\", \"pem_info_array/voltage_in_b\": \"voltage_in_b\", \"pem_info_array/current_in_b\": \"current_in_b\"})\n  |> map(fn: (r) => ({\n    r with\n    power_in_a: if float(v: r.current_in_a) > 100 then (float(v: r.voltage_in_a)/1000.0) * (float(v: r.current_in_a)/1000.0) else float(v: r.voltage_in_a) * float(v: r.current_in_a),\n    power_in_b: if float(v: r.current_in_b) > 100 then (float(v: r.voltage_in_b)/1000.0) * (float(v: r.current_in_b)/1000.0) else float(v: r.voltage_in_b) * float(v: r.current_in_b),\n   }))\n  |> map(fn: (r) => ({\n    r with\n    _value: r.power_in_a + r.power_in_b,\n  }))\n  |> last(column: \"_value\")\n  |> group(columns:[\"source\"])\n  |> keep(columns: [\"in_power\", \"_field\", \"_value\", \"source\"])\n  |> sum(column: \"_value\")\n\n// Average router power / total input data rate (for all interfaces)\n// Unit: VA/Gbps (1000s bps /1000000)\naverage_power_consumption_ratio = join(\n\ttables: {t1: total_power_router, t2: total_input_data_rate},\n    on: [\"source\"],\n\t)\n    |> map(fn: (r) => ({\n    r with\n       _value:\n        // Mark unused everything that has data rate < 100 kbps\n        if r._value_t2 > 100 then float(v: r._value_t1) / (float(v: r._value_t2) / 1000000.0)\n        else -1.0, // mark as ununsed if traffic < 100kbps\n    \t_time: r._time_t1\n\t}))\n    |> keep(columns: [\"_value\", \"_time\", \"source\", \"subscription\", \"_measurement\"])\n    |> last()\n    |> yield()",
          "refId": "With consumed power from router"
        }
      ],
      "title": "Current PCR",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "INFLUXDB2B082CADEA38E"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "Kbits"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "A"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Input - ${host_c8k}"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "B"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Output - ${host_c8k}"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 17,
        "x": 0,
        "y": 8
      },
      "id": 4,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "INFLUXDB2B082CADEA38E"
          },
          "query": "type = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-pfi-im-cmd-oper:interfaces/interface-briefs/interface-brief\" and r._field == \"type\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) =>  r._value =~ /.*IFT_.*HUNDREDGE.*/ or r._value =~ /.*IFT_.*FORTY.*/ or r._value =~ /.*IFT_.*TEN.*/)\n  |> drop(columns: [\"subscription\", \"host\", \"path\", \"_measurement\"])\n  |> map(fn: (r) => ({\n    r with\n    if_type: if r._field == \"type\" then r._value\n    else \"test\"\n   }))\n  |> group(columns: [\"interface_name\", \"source\"])\n  |> drop(columns: [\"_start\", \"_stop\", \"_field\", \"_time\", \"_value\"])\n  |> distinct(column: \"if_type\")\n\nstate = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-pfi-im-cmd-oper:interfaces/interface-briefs/interface-brief\" and r._field == \"state\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) => r._value =~ /.*up.*/)\n  |> drop(columns: [\"subscription\", \"host\", \"path\", \"_measurement\"])\n  |> map(fn: (r) => ({\n    r with\n    if_state: if r._field == \"state\" then r._value\n    else \"NA\"\n   }))\n  |> group(columns: [\"interface_name\", \"source\"])\n  |> drop(columns: [\"_start\", \"_stop\",  \"_field\", \"_time\"])\n  |> last()\n \ninterfaces_up = join(\n\ttables: {d1: state, d2: type},\n    on: [\"interface_name\", \"source\"],\n)\n  |> map(fn: (r) => ({\n    r with\n    if_state: r._value_d1,\n    if_type: r._value_d2\n   }))\n  |> drop(columns: [\"_value_d1\", \"_value_d2\"])\n  |> group(columns: [\"type\"])\n\n\ninput_data_rate = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-infra-statsd-oper:infra-statistics/interfaces/interface/total/data-rate\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) => r._field == \"input_data_rate\")\n  |> window(every: 1m) // Samples of 30 seconds have points that contain only power_in_a or only data for PM0 or PM1. Therefore, aggregate data over 1m to bring them together\n  |> mean()\n  |> duplicate(column: \"_stop\", as: \"_time\")\n  |> keep(columns: [\"_time\", \"_value\" \"source\", \"interface_name\"])\n\ninput_data_rate_if_up = join(\n\ttables: {d1: interfaces_up, d2: input_data_rate},\n    on: [\"interface_name\", \"source\"],\n)\n\n// Unit: 1000s bps\ntotal_input_data_rate = input_data_rate_if_up\n  |> group(columns: [\"_time\", \"source\"])\n  |> sum(column: \"_value\") // Sum over all interfaces\n  |> group()\n  |> group(columns: [\"source\"])\n  |> yield()\n",
          "refId": "A"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "INFLUXDB2B082CADEA38E"
          },
          "hide": false,
          "query": "type = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-pfi-im-cmd-oper:interfaces/interface-briefs/interface-brief\" and r._field == \"type\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) =>  r._value =~ /.*IFT_.*HUNDREDGE.*/ or r._value =~ /.*IFT_.*FORTY.*/ or r._value =~ /.*IFT_.*TEN.*/)\n  |> drop(columns: [\"subscription\", \"host\", \"path\", \"_measurement\"])\n  |> map(fn: (r) => ({\n    r with\n    if_type: if r._field == \"type\" then r._value\n    else \"test\"\n   }))\n  |> group(columns: [\"interface_name\", \"source\"])\n  |> drop(columns: [\"_start\", \"_stop\", \"_field\", \"_time\", \"_value\"])\n  |> distinct(column: \"if_type\")\n\nstate = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-pfi-im-cmd-oper:interfaces/interface-briefs/interface-brief\" and r._field == \"state\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) => r._value =~ /.*up.*/)\n  |> drop(columns: [\"subscription\", \"host\", \"path\", \"_measurement\"])\n  |> map(fn: (r) => ({\n    r with\n    if_state: if r._field == \"state\" then r._value\n    else \"NA\"\n   }))\n  |> group(columns: [\"interface_name\", \"source\"])\n  |> drop(columns: [\"_start\", \"_stop\",  \"_field\", \"_time\"])\n  |> last()\n \ninterfaces_up = join(\n\ttables: {d1: state, d2: type},\n    on: [\"interface_name\", \"source\"],\n)\n  |> map(fn: (r) => ({\n    r with\n    if_state: r._value_d1,\n    if_type: r._value_d2\n   }))\n  |> drop(columns: [\"_value_d1\", \"_value_d2\"])\n  |> group(columns: [\"type\"])\n\n\noutput_data_rate = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-infra-statsd-oper:infra-statistics/interfaces/interface/total/data-rate\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) => r._field == \"output_data_rate\")\n  |> window(every: 1m) // Samples of 30 seconds have points that contain only power_in_a or only data for PM0 or PM1. Therefore, aggregate data over 1m to bring them together\n  |> mean()\n  |> duplicate(column: \"_stop\", as: \"_time\")\n  |> keep(columns: [\"_time\", \"_value\" \"source\", \"interface_name\"])\n\noutput_data_rate_if_up = join(\n\ttables: {d1: interfaces_up, d2: output_data_rate},\n    on: [\"interface_name\", \"source\"],\n)\n\n// Unit: 1000s bps\ntotal_output_data_rate = output_data_rate_if_up\n  |> group(columns: [\"_time\", \"source\"])\n  |> sum(column: \"_value\") // Sum over all interfaces\n  |> group()\n  |> group(columns: [\"source\"])\n  |> yield()\n",
          "refId": "B"
        }
      ],
      "title": "Total input/output data rate",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "INFLUXDB2B082CADEA38E"
      },
      "description": "PCR = Power consumption ratio\nPower from router (input power)\nwrt Input data rate",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [
            {
              "options": {
                "-1": {
                  "color": "#808080",
                  "index": 0,
                  "text": "unused"
                }
              },
              "type": "value"
            }
          ],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "#EAB839",
                "value": 2.5
              },
              {
                "color": "red",
                "value": 2.7
              }
            ]
          },
          "unit": "VA/Gbps"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Time"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 4,
        "w": 7,
        "x": 17,
        "y": 8
      },
      "id": 9,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "/.*/",
          "values": true
        },
        "text": {
          "titleSize": 15,
          "valueSize": 20
        },
        "textMode": "value_and_name"
      },
      "pluginVersion": "9.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "INFLUXDB2B082CADEA38E"
          },
          "hide": false,
          "query": "type = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-pfi-im-cmd-oper:interfaces/interface-briefs/interface-brief\" and r._field == \"type\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) =>  r._value =~ /.*IFT_.*HUNDREDGE.*/ or r._value =~ /.*IFT_.*FORTY.*/ or r._value =~ /.*IFT_.*TEN.*/)\n  |> drop(columns: [\"subscription\", \"host\", \"path\", \"_measurement\"])\n  |> map(fn: (r) => ({\n    r with\n    if_type: if r._field == \"type\" then r._value\n    else \"test\"\n   }))\n  |> group(columns: [\"interface_name\", \"source\"])\n  |> drop(columns: [\"_start\", \"_stop\", \"_field\", \"_time\", \"_value\"])\n  |> distinct(column: \"if_type\")\n\nstate = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-pfi-im-cmd-oper:interfaces/interface-briefs/interface-brief\" and r._field == \"state\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) => r._value =~ /.*up.*/)\n  |> drop(columns: [\"subscription\", \"host\", \"path\", \"_measurement\"])\n  |> map(fn: (r) => ({\n    r with\n    if_state: if r._field == \"state\" then r._value\n    else \"NA\"\n   }))\n  |> group(columns: [\"interface_name\", \"source\"])\n  |> drop(columns: [\"_start\", \"_stop\",  \"_field\", \"_time\"])\n  |> last()\n \ninterfaces_up = join(\n\ttables: {d1: state, d2: type},\n    on: [\"interface_name\", \"source\"],\n)\n  |> map(fn: (r) => ({\n    r with\n    if_state: r._value_d1,\n    if_type: r._value_d2\n   }))\n  |> drop(columns: [\"_value_d1\", \"_value_d2\"])\n  |> group(columns: [\"type\"])\n\n\ninput_data_rate = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-infra-statsd-oper:infra-statistics/interfaces/interface/total/data-rate\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) => r._field == \"input_data_rate\")\n  |> window(every: 1m) // Samples of 30 seconds have points that contain only power_in_a or only data for PM0 or PM1. Therefore, aggregate data over 1m to bring them together\n  |> mean()\n  |> duplicate(column: \"_stop\", as: \"_time\")\n  |> truncateTimeColumn(unit: 1m)\n  |> keep(columns: [\"_time\", \"_value\" \"source\", \"interface_name\"])\n\ninput_data_rate_if_up = join(\n\ttables: {d1: interfaces_up, d2: input_data_rate},\n    on: [\"interface_name\", \"source\"],\n)\n\n// Unit: 1000s bps\ntotal_input_data_rate = input_data_rate_if_up\n  |> group(columns: [\"_time\", \"source\"])\n  |> sum(column: \"_value\") // Sum over all interfaces\n  |> group()\n  |> group(columns: [\"source\"])\n  |> highestMax(n: 1, groupColumns: [\"source\"])\n\n\ncount_interfaces = interfaces_up\n  |> keep(columns: [\"interface_name\", \"source\"])\n  |> group(columns: [\"source\"])\n  |> count(column: \"interface_name\")\n  |> map(fn: (r) => ({ r with _value: r.interface_name }))\n  |> keep(columns: [\"_value\", \"source\"])\n\ntotal_power_router = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) => \n    r._measurement == \"Cisco-IOS-XR-envmon-oper:power-management/rack/producers/producer-nodes/producer-node\" and \n    (\n    r._field == \"pem_info_array/current_in_a\" or\n    r._field == \"pem_info_array/voltage_in_a\" or \n    r._field == \"pem_info_array/current_in_b\" or\n    r._field == \"pem_info_array/voltage_in_b\"\n    ))\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> rename(columns: {\"pem_info_array/voltage_in_a\": \"voltage_in_a\", \"pem_info_array/current_in_a\": \"current_in_a\", \"pem_info_array/voltage_in_b\": \"voltage_in_b\", \"pem_info_array/current_in_b\": \"current_in_b\"})\n  |> map(fn: (r) => ({\n    r with\n    power_in_a: if float(v: r.current_in_a) > 100 then (float(v: r.voltage_in_a)/1000.0) * (float(v: r.current_in_a)/1000.0) else float(v: r.voltage_in_a) * float(v: r.current_in_a),\n    power_in_b: if float(v: r.current_in_b) > 100 then (float(v: r.voltage_in_b)/1000.0) * (float(v: r.current_in_b)/1000.0) else float(v: r.voltage_in_b) * float(v: r.current_in_b),\n   }))\n  |> map(fn: (r) => ({\n    r with\n    _value: r.power_in_a + r.power_in_b,\n  }))\n  |> window(every: 1m) // Samples of 30 seconds have points that contain only power_in_a or only data for PM0 or PM1. Therefore, aggregate data over 1m to bring them together\n  |> mean()\n  |> duplicate(column: \"_stop\", as: \"_time\")\n  |> truncateTimeColumn(unit: 1m)\n  |> group(columns: [\"_time\", \"source\"])\n  |> sum(column: \"_value\") // Sum over all tags (e.g. the PM nodes)\n  |> group()\n  |> group(columns: [\"source\"])\n\n// Average router power / total input data rate (for all interfaces)\n// Unit: VA/Gbps (1000s bps /1000000)\naverage_power_consumption_ratio = join(\n\ttables: {t1: total_power_router, t2: total_input_data_rate},\n    on: [\"_time\", \"source\"],\n\t)\n    |> map(fn: (r) => ({\n    r with\n       _value:\n        // Mark unused everything that has data rate < 100 kbps\n        if r._value_t2 > 100 then float(v: r._value_t1) / (float(v: r._value_t2) / 1000000.0)\n        else -1.0, // mark as ununsed if traffic < 100kbps\n\t}))\n    |> keep(columns: [\"_value\", \"_time\", \"source\", \"subscription\", \"_measurement\"])\n    |> yield()",
          "refId": "With consumed power from router"
        }
      ],
      "title": "PCR @max traffic",
      "transformations": [
        {
          "id": "convertFieldType",
          "options": {
            "conversions": [],
            "fields": {}
          }
        }
      ],
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "INFLUXDB2B082CADEA38E"
      },
      "description": "PCR = Power consumption ratio\nPower from router (input power)\nwrt Input data rate",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [
            {
              "options": {
                "-1": {
                  "color": "#808080",
                  "index": 0,
                  "text": "unused"
                }
              },
              "type": "value"
            }
          ],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "#EAB839",
                "value": 2.5
              },
              {
                "color": "red",
                "value": 3
              }
            ]
          },
          "unit": "VA/Gbps"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Time"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 4,
        "w": 7,
        "x": 17,
        "y": 12
      },
      "id": 12,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "/.*/",
          "values": true
        },
        "text": {
          "titleSize": 15,
          "valueSize": 20
        },
        "textMode": "value_and_name"
      },
      "pluginVersion": "9.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "INFLUXDB2B082CADEA38E"
          },
          "hide": false,
          "query": "type = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-pfi-im-cmd-oper:interfaces/interface-briefs/interface-brief\" and r._field == \"type\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) =>  r._value =~ /.*IFT_.*HUNDREDGE.*/ or r._value =~ /.*IFT_.*FORTY.*/ or r._value =~ /.*IFT_.*TEN.*/)\n  |> drop(columns: [\"subscription\", \"host\", \"path\", \"_measurement\"])\n  |> map(fn: (r) => ({\n    r with\n    if_type: if r._field == \"type\" then r._value\n    else \"test\"\n   }))\n  |> group(columns: [\"interface_name\", \"source\"])\n  |> drop(columns: [\"_start\", \"_stop\", \"_field\", \"_time\", \"_value\"])\n  |> distinct(column: \"if_type\")\n\nstate = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-pfi-im-cmd-oper:interfaces/interface-briefs/interface-brief\" and r._field == \"state\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) => r._value =~ /.*up.*/)\n  |> drop(columns: [\"subscription\", \"host\", \"path\", \"_measurement\"])\n  |> map(fn: (r) => ({\n    r with\n    if_state: if r._field == \"state\" then r._value\n    else \"NA\"\n   }))\n  |> group(columns: [\"interface_name\", \"source\"])\n  |> drop(columns: [\"_start\", \"_stop\",  \"_field\", \"_time\"])\n  |> last()\n \ninterfaces_up = join(\n\ttables: {d1: state, d2: type},\n    on: [\"interface_name\", \"source\"],\n)\n  |> map(fn: (r) => ({\n    r with\n    if_state: r._value_d1,\n    if_type: r._value_d2\n   }))\n  |> drop(columns: [\"_value_d1\", \"_value_d2\"])\n  |> group(columns: [\"type\"])\n\n\ninput_data_rate = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-infra-statsd-oper:infra-statistics/interfaces/interface/total/data-rate\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) => r._field == \"input_data_rate\")\n  |> window(every: 1m) // Samples of 30 seconds have points that contain only power_in_a or only data for PM0 or PM1. Therefore, aggregate data over 1m to bring them together\n  |> mean()\n  |> duplicate(column: \"_stop\", as: \"_time\")\n  |> truncateTimeColumn(unit: 1m)\n  |> keep(columns: [\"_time\", \"_value\" \"source\", \"interface_name\"])\n\ninput_data_rate_if_up = join(\n\ttables: {d1: interfaces_up, d2: input_data_rate},\n    on: [\"interface_name\", \"source\"],\n)\n\n// Unit: 1000s bps\ntotal_input_data_rate = input_data_rate_if_up\n  |> group(columns: [\"_time\", \"source\"])\n  |> sum(column: \"_value\") // Sum over all interfaces\n  |> group()\n  |> group(columns: [\"source\"])\n  |> lowestMin(n: 1, groupColumns: [\"source\"])\n\n\ncount_interfaces = interfaces_up\n  |> keep(columns: [\"interface_name\", \"source\"])\n  |> group(columns: [\"source\"])\n  |> count(column: \"interface_name\")\n  |> map(fn: (r) => ({ r with _value: r.interface_name }))\n  |> keep(columns: [\"_value\", \"source\"])\n\ntotal_power_router = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) => \n    r._measurement == \"Cisco-IOS-XR-envmon-oper:power-management/rack/producers/producer-nodes/producer-node\" and \n    (\n    r._field == \"pem_info_array/current_in_a\" or\n    r._field == \"pem_info_array/voltage_in_a\" or \n    r._field == \"pem_info_array/current_in_b\" or\n    r._field == \"pem_info_array/voltage_in_b\"\n    ))\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> rename(columns: {\"pem_info_array/voltage_in_a\": \"voltage_in_a\", \"pem_info_array/current_in_a\": \"current_in_a\", \"pem_info_array/voltage_in_b\": \"voltage_in_b\", \"pem_info_array/current_in_b\": \"current_in_b\"})\n  |> map(fn: (r) => ({\n    r with\n    power_in_a: if float(v: r.current_in_a) > 100 then (float(v: r.voltage_in_a)/1000.0) * (float(v: r.current_in_a)/1000.0) else float(v: r.voltage_in_a) * float(v: r.current_in_a),\n    power_in_b: if float(v: r.current_in_b) > 100 then (float(v: r.voltage_in_b)/1000.0) * (float(v: r.current_in_b)/1000.0) else float(v: r.voltage_in_b) * float(v: r.current_in_b),\n   }))\n  |> map(fn: (r) => ({\n    r with\n    _value: r.power_in_a + r.power_in_b,\n  }))\n  |> window(every: 1m) // Samples of 30 seconds have points that contain only power_in_a or only data for PM0 or PM1. Therefore, aggregate data over 1m to bring them together\n  |> mean()\n  |> duplicate(column: \"_stop\", as: \"_time\")\n  |> truncateTimeColumn(unit: 1m)\n  |> group(columns: [\"_time\", \"source\"])\n  |> sum(column: \"_value\") // Sum over all tags (e.g. the PM nodes)\n  |> group()\n  |> group(columns: [\"source\"])\n\n// Average router power / total input data rate (for all interfaces)\n// Unit: VA/Gbps (1000s bps /1000000)\naverage_power_consumption_ratio = join(\n\ttables: {t1: total_power_router, t2: total_input_data_rate},\n    on: [\"_time\", \"source\"],\n\t)\n    |> map(fn: (r) => ({\n    r with\n       _value:\n        // Mark unused everything that has data rate < 100 kbps\n        if r._value_t2 > 100 then float(v: r._value_t1) / (float(v: r._value_t2) / 1000000.0)\n        else -1.0, // mark as ununsed if traffic < 100kbps\n\t}))\n    |> keep(columns: [\"_value\", \"_time\", \"source\", \"subscription\", \"_measurement\"])\n    |> yield()",
          "refId": "With consumed power from router"
        }
      ],
      "title": "PCR @min traffic",
      "transformations": [
        {
          "id": "convertFieldType",
          "options": {
            "conversions": [],
            "fields": {}
          }
        }
      ],
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "INFLUXDB2B082CADEA38E"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 17,
        "x": 0,
        "y": 16
      },
      "id": 8,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "INFLUXDB2B082CADEA38E"
          },
          "query": "type = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-pfi-im-cmd-oper:interfaces/interface-briefs/interface-brief\" and r._field == \"type\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) =>  r._value =~ /.*IFT_.*HUNDREDGE.*/ or r._value =~ /.*IFT_.*FORTY.*/ or r._value =~ /.*IFT_.*TEN.*/)\n  |> drop(columns: [\"subscription\", \"host\", \"path\", \"_measurement\"])\n  |> map(fn: (r) => ({\n    r with\n    if_type: if r._field == \"type\" then r._value\n    else \"test\"\n   }))\n  |> group(columns: [\"interface_name\", \"source\"])\n  |> drop(columns: [\"_start\", \"_stop\", \"_field\", \"_time\", \"_value\"])\n  |> distinct(column: \"if_type\")\n\nstate = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-pfi-im-cmd-oper:interfaces/interface-briefs/interface-brief\" and r._field == \"state\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) => r._value =~ /.*up.*/)\n  |> drop(columns: [\"subscription\", \"host\", \"path\", \"_measurement\"])\n  |> map(fn: (r) => ({\n    r with\n    if_state: if r._field == \"state\" then r._value\n    else \"NA\"\n   }))\n  |> group(columns: [\"interface_name\", \"source\"])\n  |> drop(columns: [\"_start\", \"_stop\",  \"_field\", \"_time\"])\n  |> last()\n \ninterfaces_up = join(\n\ttables: {d1: state, d2: type},\n    on: [\"interface_name\", \"source\"],\n)\n  |> map(fn: (r) => ({\n    r with\n    if_state: r._value_d1,\n    if_type: r._value_d2\n   }))\n  |> drop(columns: [\"_value_d1\", \"_value_d2\"])\n  |> group(columns: [\"type\"])\n\n\ninput_data_rate = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"Cisco-IOS-XR-infra-statsd-oper:infra-statistics/interfaces/interface/total/data-rate\")\n  |> filter(fn: (r) => r.source == \"${host_c8k}\")\n  |> filter(fn: (r) => r._field == \"input_data_rate\")\n  |> window(every: 1m) // Samples of 30 seconds have points that contain only power_in_a or only data for PM0 or PM1. Therefore, aggregate data over 1m to bring them together\n  |> mean()\n  |> duplicate(column: \"_stop\", as: \"_time\")\n  |> window(every: 1m) // Samples of 30 seconds have points that contain only power_in_a or only data for PM0 or PM1. Therefore, aggregate data over 1m to bring them together\n  |> mean()\n  |> duplicate(column: \"_start\", as: \"_time\")\n  |> truncateTimeColumn(unit: 1m)\n  |> keep(columns: [\"_time\", \"_value\" \"source\", \"interface_name\"])\n\ninput_data_rate_if_up = join(\n\ttables: {d1: interfaces_up, d2: input_data_rate},\n    on: [\"interface_name\", \"source\"],\n)\n\n// Unit: 1000s bps\ntotal_input_data_rate = input_data_rate_if_up\n  |> group(columns: [\"_time\", \"source\"])\n  |> sum(column: \"_value\") // Sum over all interfaces\n  |> group()\n  |> group(columns: [\"source\"])\n\n\ncount_interfaces = interfaces_up\n  |> keep(columns: [\"interface_name\", \"source\"])\n  |> group(columns: [\"source\"])\n  |> count(column: \"interface_name\")\n  |> map(fn: (r) => ({ r with _value: r.interface_name }))\n  |> keep(columns: [\"_value\", \"source\"])\n\ntotal_power_router = from(bucket: \"bucket1\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => \n    r._measurement == \"Cisco-IOS-XR-envmon-oper:power-management/rack/producers/producer-nodes/producer-node\" and \n    (\n    r._field == \"pem_info_array/current_in_a\" or\n    r._field == \"pem_info_array/voltage_in_a\" or \n    r._field == \"pem_info_array/current_in_b\" or\n    r._field == \"pem_info_array/voltage_in_b\"\n    )\n    and r.source == \"${host_c8k}\")\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> rename(columns: {\"pem_info_array/voltage_in_a\": \"voltage_in_a\", \"pem_info_array/current_in_a\": \"current_in_a\", \"pem_info_array/voltage_in_b\": \"voltage_in_b\", \"pem_info_array/current_in_b\": \"current_in_b\"})\n  |> map(fn: (r) => ({\n    r with\n    power_in_a: if float(v: r.current_in_a) > 100 then (float(v: r.voltage_in_a)/1000.0) * (float(v: r.current_in_a)/1000.0) else float(v: r.voltage_in_a) * float(v: r.current_in_a),\n    power_in_b: if float(v: r.current_in_b) > 100 then (float(v: r.voltage_in_b)/1000.0) * (float(v: r.current_in_b)/1000.0) else float(v: r.voltage_in_b) * float(v: r.current_in_b),\n   }))\n  |> map(fn: (r) => ({\n    r with\n    _value: r.power_in_a + r.power_in_b,\n  }))\n  |> window(every: 1m) // Samples of 30 seconds have points that contain only power_in_a or only data for PM0 or PM1. Therefore, aggregate data over 1m to bring them together\n  |> mean()\n  |> duplicate(column: \"_start\", as: \"_time\")\n  |> truncateTimeColumn(unit: 1m)\n  |> group(columns: [\"_time\", \"source\"])\n  |> sum(column: \"_value\") // Sum over all tags (e.g. the PM nodes)\n  |> group()\n  |> group(columns: [\"source\"])\n\n// Average router power / total input data rate (for all interfaces)\n// Unit: VA/Gbps (1000s bps /1000000)\naverage_power_consumption_ratio = join(\n\ttables: {t1: total_power_router, t2: total_input_data_rate},\n    on: [\"_time\", \"source\"],\n\t)\n    |> map(fn: (r) => ({\n    r with\n       _value:\n        // Mark unused everything that has data rate < 100 kbps\n        if r._value_t2 > 100 then float(v: r._value_t1) / (float(v: r._value_t2) / 1000000.0)\n        else -1.0, // mark as ununsed if traffic < 100kbps\n\t}))\n    |> keep(columns: [\"_value\", \"_time\", \"source\", \"subscription\", \"_measurement\"])\n    |> yield()",
          "refId": "A"
        }
      ],
      "title": "PCR",
      "type": "timeseries"
    }
  ],
  "refresh": "5m",
  "schemaVersion": 37,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "isNone": true,
          "selected": false,
          "text": "None",
          "value": ""
        },
        "datasource": {
          "type": "influxdb",
          "uid": "INFLUXDB2B082CADEA38E"
        },
        "definition": "import \"influxdata/influxdb/v1\"\n\nv1.measurementTagValues(\n  bucket: \"bucket1\",\n  measurement: \"Cisco-IOS-XR-envmon-oper:power-management/rack/consumers/consumer-nodes/consumer-node\",\n  tag: \"source\"\n)",
        "hide": 0,
        "includeAll": false,
        "label": "",
        "multi": true,
        "name": "host_c8k",
        "options": [],
        "query": "import \"influxdata/influxdb/v1\"\n\nv1.measurementTagValues(\n  bucket: \"bucket1\",\n  measurement: \"Cisco-IOS-XR-envmon-oper:power-management/rack/consumers/consumer-nodes/consumer-node\",\n  tag: \"source\"\n)",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-1h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "PCR versus Traffic",
  "uid": "OrZfoxs7z",
  "version": 1,
  "weekStart": ""
}
